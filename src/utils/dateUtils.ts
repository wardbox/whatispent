import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import isBetween from 'dayjs/plugin/isBetween'
import weekOfYear from 'dayjs/plugin/weekOfYear'
import relativeTime from 'dayjs/plugin/relativeTime'
import updateLocale from 'dayjs/plugin/updateLocale'

// --- Centralized Dayjs Configuration ---
dayjs.extend(utc)
dayjs.extend(isBetween)
dayjs.extend(weekOfYear)
dayjs.extend(relativeTime)
dayjs.extend(updateLocale)

// Optional: Update locale defaults if needed globally
dayjs.updateLocale('en', {
  relativeTime: {
    future: 'in %s',
    past: '%s ago',
    s: 'a few seconds',
    m: 'a minute',
    mm: '%d minutes',
    h: 'an hour',
    hh: '%d hours',
    d: 'a day',
    dd: '%d days',
    w: 'a week',
    ww: '%d weeks',
    M: 'a month',
    MM: '%d months',
    y: 'a year',
    yy: '%d years',
  },
  // Add week start day if needed, e.g., weekStart: 1 for Monday
})
// --- End Configuration ---

/**
 * Parses a date string as UTC.
 * Ensures consistent handling of timestamps from the database.
 * @param dateString ISO 8601 string or Date object
 * @returns Dayjs object in UTC mode
 */
export const parseDateUTC = (dateString: string | Date): dayjs.Dayjs => {
  return dayjs.utc(dateString)
}

/**
 * Formats a transaction date for display in the list.
 * Shows the local date ('MMM D') if the original UTC time was midnight
 * (indicating Plaid likely didn't provide a specific time).
 * Shows the local time ('h:mm A') otherwise.
 * @param dateString ISO 8601 string or Date object from DB
 * @returns Formatted string (e.g., "Apr 14" or "10:32 AM")
 */
export const formatTransactionDisplayDate = (
  dateString: string | Date,
): string => {
  const txDateTimeUTC = parseDateUTC(dateString) // Keep UTC for the check
  const isMidnightUTC =
    txDateTimeUTC.hour() === 0 &&
    txDateTimeUTC.minute() === 0 &&
    txDateTimeUTC.second() === 0

  // Always use local time for formatting the output
  // const txDateTimeLocal = dayjs(dateString); <-- No longer needed here

  if (isMidnightUTC) {
    // It was midnight UTC, show the UTC date part
    return txDateTimeUTC.format('MMM D') // Use UTC object
  } else {
    // It has a specific time, show local time part
    return dayjs(dateString).format('h:mm A') // Use local conversion for time
  }
}

/**
 * Formats the date part of a timestamp string in UTC.
 * @param dateString ISO 8601 string or Date object from DB
 * @returns Formatted date string (e.g., "April 15, 2025")
 */
export const formatDateUTC = (dateString: string | Date): string => {
  return dayjs.utc(dateString).format('MMMM D, YYYY') // Use UTC
}

/**
 * Formats the time part of a timestamp string in the user's local timezone.
 * @param dateString ISO 8601 string or Date object from DB
 * @returns Formatted time string (e.g., "5:00 PM")
 */
export const formatTimeLocal = (dateString: string | Date): string => {
  return dayjs(dateString).format('h:mm A')
}

/**
 * Determines the transaction group key based on its UTC date.
 * Always returns the month and year ('MMMM YYYY') for grouping.
 * @param dateString ISO 8601 string or Date object from DB
 * @returns Group key ('MMMM YYYY')
 */
export const getTransactionGroupKeyUTC = (
  dateString: string | Date,
): string => {
  const txDate = parseDateUTC(dateString) // Transaction date in UTC
  return txDate.format('MMMM YYYY') // Always group by Month YYYY
}

/**
 * Gets the display title and date range string for a transaction group header.
 * Since grouping is by month, title and date range are both the month/year string.
 *
 * @param groupKey The key generated by getTransactionGroupKeyUTC ('MMMM YYYY')
 * @returns Object with { title: string; date: string } where both are the month/year
 */
export const getTransactionGroupDisplayInfo = (
  groupKey: string,
): { title: string; date: string } => {
  const title = groupKey
  const dateRange = groupKey // Display the same month/year string

  return { title, date: dateRange }
}
