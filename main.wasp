app whatispent {
  wasp: {
    version: "^0.16.3"
  },
  title: "what i spent: this day. this week. this month.",
  head: [
    "<meta name='description' content='what i spent helps you understand where your money goes.'>",
    
    "<meta property='og:url' content='https://whatispent.com'>",
    "<meta property='og:type' content='website'>",
    "<meta property='og:title' content='what i spent: this day. this week. this month.'>",
    "<meta property='og:description' content='what i spent helps you understand where your money goes.'>",
    "<meta property='og:image' content='https://whatispent.com/og-image.png'>",
    
    "<meta name='twitter:card' content='summary_large_image'>",
    "<meta property='twitter:domain' content='whatispent.com'>",
    "<meta property='twitter:url' content='https://whatispent.com'>",
    "<meta name='twitter:title' content='what i spent: this day. this week. this month.'>",
    "<meta name='twitter:description' content='what i spent helps you understand where your money goes.'>",
    "<meta name='twitter:image' content='https://whatispent.com/og-image.png'>",
    "<script defer data-domain='whatispent.com' src='https://plausible.io/js/script.js'></script>",
    "<script src='https://cdn.plaid.com/link/v2/stable/link-initialize.js'></script>"
  ],
  auth: {
    userEntity: User,
    methods: {
      google: {
        configFn: import { getGoogleAuthConfig } from "@src/auth/user-signup-fields",
        userSignupFields: import { getGoogleUserFields } from "@src/auth/user-signup-fields",
      },
    },
    onAuthSucceededRedirectTo: "/dashboard",
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/root/RootPage",
    setupFn: import setupClient from "@src/lib/setup"
  },
}

//#region Routes
route Landing { path: "/", to: Landing }
route Dashboard { path: "/dashboard", to: DashboardPage }
route Profile { path: "/profile", to: ProfilePage }
route LoginRoute { path: "/login", to: LoginPage }
route SignupRoute { path: "/signup", to: SignupPage }
route TransactionsRoute { path: "/transactions", to: TransactionsPage }
route SubscriptionRoute { path: "/subscription", to: SubscriptionPage }
route CheckoutResultRoute { path: "/checkout", to: CheckoutResultPage }
route AdminRoute { path: "/admin", to: AdminPage }
route NotFoundRoute { path: "*", to: NotFoundPage }
//#endregion

//#region Pages
page Landing {
  component: import Landing from "@src/landing/LandingPage",
}

page DashboardPage {
  component: import Dashboard from "@src/dashboard/DashboardPage.jsx",
  authRequired: true
}

page ProfilePage {
  component: import Profile from "@src/ProfilePage",
  authRequired: true,
}

page LoginPage {
  component: import { Login } from "@src/auth/auth",
}

page SignupPage {
  component: import { Signup } from "@src/auth/auth",
}

page TransactionsPage {
  component: import TransactionsPage from "@src/transactions/TransactionsPage",
  authRequired: true
}

page AdminPage {
  component: import AdminPage from "@src/admin/AdminPage",
  authRequired: true
}

page NotFoundPage {
  component: import NotFound from "@src/404Page"
}

page SubscriptionPage {
  component: import SubscriptionPage from "@src/SubscriptionPage",
  authRequired: true
}

page CheckoutResultPage {
  component: import CheckoutResult from "@src/CheckoutResultPage.tsx"
}

//#endregion

//#region Plaid Actions

action createLinkToken {
  fn: import { createLinkToken } from "@src/plaid/operations.ts",
  entities: [User, Institution, Account, Transaction]
}

action exchangePublicToken {
  fn: import { exchangePublicToken } from "@src/plaid/operations.ts",
  entities: [User, Institution, Account, Transaction]
}

action syncTransactions {
  fn: import { syncTransactions } from "@src/plaid/operations.ts",
  entities: [User, Institution, Account, Transaction]
}

action deleteInstitution {
  fn: import { deleteInstitution } from "@src/plaid/operations.ts",
  entities: [User, Institution, Account, Transaction]
}

//#endregion

//#region General Queries

query getUserSubscriptionStatus {
  fn: import { getUserSubscriptionStatus } from "@src/queries.ts",
  entities: [User]
}

query getSpendingSummary {
  fn: import { getSpendingSummary } from "@src/plaid/operations.ts",
  entities: [Account, Institution, Transaction]
}

query getMonthlySpending {
  fn: import { getMonthlySpending } from "@src/plaid/operations.ts",
  entities: [Transaction]
}

query getCategorySpending {
  fn: import { getCategorySpending } from "@src/plaid/operations.ts",
  entities: [Account, Institution,Transaction]
}

query getAllTransactions {
  fn: import { getAllTransactions } from "@src/plaid/operations.ts",
  entities: [Account, Institution, Transaction]
}

query getInstitutions {
  fn: import { getInstitutions } from "@src/plaid/operations.js",
  entities: [Transaction,Institution]
}

//#endregion

//#region Admin Queries

query getUsers {
  fn: import { getUsers } from "@src/admin/operations.ts",
  entities: [User, Institution, Account]
}

//#endregion

//#region Stripe Actions

action createCheckoutSession {
  fn: import { createCheckoutSession } from "@src/stripe/operations.ts",
  entities: [User]
}

action createCustomerPortalSession {
  fn: import { createCustomerPortalSession } from "@src/stripe/operations.ts",
  entities: [User]
}

//#endregion

//#region Stripe API

api stripeWebhook {
  fn: import { handleStripeWebhook } from "@src/stripe/webhooks.ts",
  middlewareConfigFn: import { stripeWebhookMiddlewareConfigFn } from "@src/stripe/webhooks",
  httpRoute: (POST, "/stripe-webhooks"),
  entities: [User]
}

//#endregion
