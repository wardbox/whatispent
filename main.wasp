app roke {
  wasp: {
    version: "^0.16.2"
  },
  title: "Roke: A Full-Stack Wasp Starter with Modern UI Components",
  head: [
    "<meta name='description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    
    "<meta property='og:url' content='https://example.com'>",
    "<meta property='og:type' content='website'>",
    "<meta property='og:title' content='Roke: A Full-Stack Wasp Starter with Modern UI Components'>",
    "<meta property='og:description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    "<meta property='og:image' content='https://example.com/example.png'>",
    
    "<meta name='twitter:card' content='summary_large_image'>",
    "<meta property='twitter:domain' content='example.com'>",
    "<meta property='twitter:url' content='https://example.com'>",
    "<meta name='twitter:title' content='Roke: A Full-Stack Wasp Starter with Modern UI Components'>",
    "<meta name='twitter:description' content='A comprehensive Wasp starter template featuring shadcn/ui components, Motion animations, and TypeScript support for building modern full-stack web applications.'>",
    "<meta name='twitter:image' content='https://example.com/example.png'>"
  ],
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "example.com",
          email: "wizard@example.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/user-signup-fields",
      }
    },
    onAuthSucceededRedirectTo: "/note-example",
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/root/RootPage",
    setupFn: import setupClient from "@src/lib/setup"
  },
  emailSender: {
    provider: Dummy,
  }
}

//#region Routes
route Landing { path: "/", to: Landing }
route Guide { path: "/guide", to: Guide }
route NoteExample { path: "/note-example", to: NoteExample }
route Motion { path: "/motion", to: Motion }
route Utils { path: "/utils", to: Utils }
route Profile { path: "/profile/:id", to: ProfilePage }
route LoginRoute { path: "/login", to: LoginPage }
route SignupRoute { path: "/signup", to: SignupPage }
route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
route NotFoundRoute { path: "*", to: NotFoundPage }
//#endregion

//#region Pages
page Landing {
  component: import Landing from "@src/landing/LandingPage",
}

page Guide {
  component: import Guide from "@src/GuidePage",
}

page NoteExample {
  component: import NoteExample from "@src/notes/NotesPage",
}

page Motion {
  component: import Motion from "@src/motion/MotionPage",
}

page Utils {
  component: import Utils from "@src/UtilsPage",
}

page ProfilePage {
  component: import Profile from "@src/ProfilePage",
  authRequired: true,
}

page LoginPage {
  component: import { Login } from "@src/auth/auth",
}

page SignupPage {
  component: import { Signup } from "@src/auth/auth",
}

page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/auth/auth",
}

page PasswordResetPage {
  component: import { PasswordReset } from "@src/auth/auth",
}

page EmailVerificationPage {
  component: import { EmailVerification } from "@src/auth/auth",
}

page NotFoundPage {
  component: import NotFound from "@src/404Page"
}
//#endregion

//#region Notes
action createNote {
  fn: import { createNote } from "@src/notes/operations",
  entities: [User, Note],
}

query getNotes {
  fn: import { getNotes } from "@src/notes/operations",
  entities: [User, Note],
}

action updateNote {
  fn: import { updateNote } from "@src/notes/operations",
  entities: [User, Note],
}

action deleteNote {
  fn: import { deleteNote } from "@src/notes/operations",
  entities: [User, Note],
}
//#endregion

//#region Jobs
job exampleJob {
  executor: PgBoss,
  perform: {
    fn: import { exampleJob } from "@src/jobs/example-job",
  },
  entities: [User, Note],
  schedule: {
    cron: "0 0 * * 0"
  }
}
//#endregion
